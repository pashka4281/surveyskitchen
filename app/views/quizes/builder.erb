<div id="quiz-builder">
	<div id="preview">
		<div id="build-canvas">
			<% for item in @quiz.items %>
				<%= render "/quiz_items/items/#{item.simple_name}", item: item %>
			<% end %>
		</div>
	</div>
	<div id="toolbox">
		<div data-item-type="desc_text">Text</div>
	</div>
</div>


<!-- <link rel="stylesheet" href="http://code.jquery.com/ui/1.10.2/themes/smoothness/jquery-ui.css" /> -->


<%= content_for :js do %>
<script>
$(function() {


	$canvas = $("#build-canvas");
	$gridSize = 1;

	//getting new element position relatively to canvas
	function getElementPos(canvas, ui_pos, elementSize, gridSize){
		canvasPos = canvas.position();
		canvasSize = {height: canvas.height(), width: canvas.width()};

		var top_x = ui_pos.top - canvasPos.top;
		var left_y = ui_pos.left - canvasPos.left;

		if(top_x < 0)
			top_x = 0;
		if(top_x > canvasSize.height - elementSize.height)
			top_x = canvasSize.height - elementSize.height;

		if(left_y < 0)
			left_y = 0;
		if(left_y > canvasSize.width - elementSize.width)
			left_y = canvasSize.width - elementSize.width;

		top_x = top_x-(top_x % gridSize);
		left_y = left_y-(left_y % gridSize);

		return {top: top_x, left: left_y }
	}

	function make_draggable_and_resizable(){
		$canvas.find( "> div" ).unbind('element_moved_or_resized')
		$canvas.find( "> div" ).draggable({
			containment: "#build-canvas",
			snap: true,
			cursor: "move",
			snapTolerance: 4,
			grid: [$gridSize,$gridSize],
			stack: "div",
			start: function(event, ui){
				console.log(ui);
			},
			stop: function(event, ui){
				$(this).trigger('element_moved_or_resized');
			}

		}).resizable({
			//ghost: true,
			containment: "#build-canvas"
			,handles: 'all'
			,minWidth: 14
			,minHeight: 14
			,grid: [$gridSize,$gridSize]
			,resize: function(event, ui){
				endX = Math.round($(this).position().left/4);
	            endY = Math.round($(this).position().top/4);
	            $(this).attr('x', endX).attr('y', endY)
			}
			,stop: function(event, ui){ 
				$(this).trigger('element_moved_or_resized');
			}
	    	//,helper: "ui-resizable-helper"
	    })
	    .bind('element_moved_or_resized', _elementMovedOrResized);//.trigger('element_moved_or_resized')

	    $canvas.droppable({
			activeClass: "highlighted"
			,accept: "#toolbox > div"
			,drop: function( event, ui ) {
				var i_type = $(ui.helper).data('item-type'),
					_this = this,
					_ui_pos = $(ui)[0].position;

				$.ajax({
					url: '<%= quize_items_path(@quiz) %>',
					type: 'POST',
					dataType: 'json',
					data: {
						item_type: i_type
						,position_top: _ui_pos.top
						,position_left: _ui_pos.left
					},
					success: function(resp){
						console.log(resp)

						//return;
						var elemSize  = {height: resp.size[1], width: resp.size[0]}
						var pos = getElementPos($(_this), _ui_pos, elemSize, $gridSize)
						console.log(elemSize)
						
						$(resp.html)
							.appendTo($canvas)
							.css($.extend({}, {top: pos.top, left: pos.left }, resp.css));
						make_draggable_and_resizable();						
					}
				})

			}

	    })	
	}

make_draggable_and_resizable();

    $('#toolbox > div').draggable({
    	cancel: "a.ui-icon", // clicking an icon won't initiate dragging
		revert: "invalid", // when not dropped, the item will revert back to its initial position

		//helper: "clone",
		helper: function(){
			item_type = $(this).data('item-type')
			return $('<div class="' + item_type + '"></div>').data('item-type', item_type);
		},
		cursor: "move"

    })



    function _elementMovedOrResized(){
    	var _this = $(this);//position())
    	$.ajax({
			url: '<%= quize_items_path(@quiz) %>/' + _this.attr('item_id'),
			type: 'PUT',
			dataType: 'json',
			data: {
				item:{
					size: [_this.width(),  _this.height()],
					position: [_this.position().top, _this.position().left]
				}
			},
			success: function(resp){
				console.log(resp)
				_this.attr('style', resp.css)				
			}
		})
    }
});
</script>
<% end %>